// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGES_SLAMD_FLATB_H_
#define FLATBUFFERS_GENERATED_MESSAGES_SLAMD_FLATB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "visualizer_generated.h"

namespace slamd {
namespace flatb {

struct Message;
struct MessageBuilder;

enum MessageUnion : uint8_t {
  MessageUnion_NONE = 0,
  MessageUnion_initial_state = 1,
  MessageUnion_MIN = MessageUnion_NONE,
  MessageUnion_MAX = MessageUnion_initial_state
};

inline const MessageUnion (&EnumValuesMessageUnion())[2] {
  static const MessageUnion values[] = {
    MessageUnion_NONE,
    MessageUnion_initial_state
  };
  return values;
}

inline const char * const *EnumNamesMessageUnion() {
  static const char * const names[3] = {
    "NONE",
    "initial_state",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageUnion(MessageUnion e) {
  if (::flatbuffers::IsOutRange(e, MessageUnion_NONE, MessageUnion_initial_state)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageUnion()[index];
}

template<typename T> struct MessageUnionTraits {
  static const MessageUnion enum_value = MessageUnion_NONE;
};

template<> struct MessageUnionTraits<slamd::flatb::InitialState> {
  static const MessageUnion enum_value = MessageUnion_initial_state;
};

bool VerifyMessageUnion(::flatbuffers::Verifier &verifier, const void *obj, MessageUnion type);
bool VerifyMessageUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_MESSAGE = 6
  };
  slamd::flatb::MessageUnion message_type() const {
    return static_cast<slamd::flatb::MessageUnion>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  template<typename T> const T *message_as() const;
  const slamd::flatb::InitialState *message_as_initial_state() const {
    return message_type() == slamd::flatb::MessageUnion_initial_state ? static_cast<const slamd::flatb::InitialState *>(message()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           VerifyMessageUnion(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
};

template<> inline const slamd::flatb::InitialState *Message::message_as<slamd::flatb::InitialState>() const {
  return message_as_initial_state();
}

struct MessageBuilder {
  typedef Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message_type(slamd::flatb::MessageUnion message_type) {
    fbb_.AddElement<uint8_t>(Message::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(::flatbuffers::Offset<void> message) {
    fbb_.AddOffset(Message::VT_MESSAGE, message);
  }
  explicit MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Message> CreateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    slamd::flatb::MessageUnion message_type = slamd::flatb::MessageUnion_NONE,
    ::flatbuffers::Offset<void> message = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  return builder_.Finish();
}

inline bool VerifyMessageUnion(::flatbuffers::Verifier &verifier, const void *obj, MessageUnion type) {
  switch (type) {
    case MessageUnion_NONE: {
      return true;
    }
    case MessageUnion_initial_state: {
      auto ptr = reinterpret_cast<const slamd::flatb::InitialState *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMessageUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessageUnion(
        verifier,  values->Get(i), types->GetEnum<MessageUnion>(i))) {
      return false;
    }
  }
  return true;
}

inline const slamd::flatb::Message *GetMessage(const void *buf) {
  return ::flatbuffers::GetRoot<slamd::flatb::Message>(buf);
}

inline const slamd::flatb::Message *GetSizePrefixedMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<slamd::flatb::Message>(buf);
}

inline bool VerifyMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<slamd::flatb::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<slamd::flatb::Message>(nullptr);
}

inline void FinishMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<slamd::flatb::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<slamd::flatb::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flatb
}  // namespace slamd

#endif  // FLATBUFFERS_GENERATED_MESSAGES_SLAMD_FLATB_H_
