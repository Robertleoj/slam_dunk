// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VISUALIZER_SLAMD_FLATB_H_
#define FLATBUFFERS_GENERATED_VISUALIZER_SLAMD_FLATB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "geometry_generated.h"
#include "gmath_generated.h"

namespace slamd {
namespace flatb {

struct ChildEntry;
struct ChildEntryBuilder;

struct Node;
struct NodeBuilder;

struct Tree;
struct TreeBuilder;

struct View;
struct ViewBuilder;

struct InitialState;
struct InitialStateBuilder;

enum ViewType : int8_t {
  ViewType_NONE = 0,
  ViewType_CANVAS = 1,
  ViewType_SCENE = 2,
  ViewType_MIN = ViewType_NONE,
  ViewType_MAX = ViewType_SCENE
};

inline const ViewType (&EnumValuesViewType())[3] {
  static const ViewType values[] = {
    ViewType_NONE,
    ViewType_CANVAS,
    ViewType_SCENE
  };
  return values;
}

inline const char * const *EnumNamesViewType() {
  static const char * const names[4] = {
    "NONE",
    "CANVAS",
    "SCENE",
    nullptr
  };
  return names;
}

inline const char *EnumNameViewType(ViewType e) {
  if (::flatbuffers::IsOutRange(e, ViewType_NONE, ViewType_SCENE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesViewType()[index];
}

struct ChildEntry FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ChildEntryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_VALUE = 6
  };
  const ::flatbuffers::String *key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_KEY);
  }
  const slamd::flatb::Node *value() const {
    return GetPointer<const slamd::flatb::Node *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyTable(value()) &&
           verifier.EndTable();
  }
};

struct ChildEntryBuilder {
  typedef ChildEntry Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(::flatbuffers::Offset<::flatbuffers::String> key) {
    fbb_.AddOffset(ChildEntry::VT_KEY, key);
  }
  void add_value(::flatbuffers::Offset<slamd::flatb::Node> value) {
    fbb_.AddOffset(ChildEntry::VT_VALUE, value);
  }
  explicit ChildEntryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ChildEntry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ChildEntry>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ChildEntry> CreateChildEntry(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> key = 0,
    ::flatbuffers::Offset<slamd::flatb::Node> value = 0) {
  ChildEntryBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ChildEntry> CreateChildEntryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    ::flatbuffers::Offset<slamd::flatb::Node> value = 0) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  return slamd::flatb::CreateChildEntry(
      _fbb,
      key__,
      value);
}

struct Node FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TRANSFORM = 4,
    VT_GEOMETRY = 6,
    VT_CHILDREN = 8
  };
  const slamd::flatb::Mat4 *transform() const {
    return GetStruct<const slamd::flatb::Mat4 *>(VT_TRANSFORM);
  }
  const slamd::flatb::Geometry *geometry() const {
    return GetPointer<const slamd::flatb::Geometry *>(VT_GEOMETRY);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<slamd::flatb::ChildEntry>> *children() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<slamd::flatb::ChildEntry>> *>(VT_CHILDREN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<slamd::flatb::Mat4>(verifier, VT_TRANSFORM, 4) &&
           VerifyOffset(verifier, VT_GEOMETRY) &&
           verifier.VerifyTable(geometry()) &&
           VerifyOffset(verifier, VT_CHILDREN) &&
           verifier.VerifyVector(children()) &&
           verifier.VerifyVectorOfTables(children()) &&
           verifier.EndTable();
  }
};

struct NodeBuilder {
  typedef Node Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_transform(const slamd::flatb::Mat4 *transform) {
    fbb_.AddStruct(Node::VT_TRANSFORM, transform);
  }
  void add_geometry(::flatbuffers::Offset<slamd::flatb::Geometry> geometry) {
    fbb_.AddOffset(Node::VT_GEOMETRY, geometry);
  }
  void add_children(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<slamd::flatb::ChildEntry>>> children) {
    fbb_.AddOffset(Node::VT_CHILDREN, children);
  }
  explicit NodeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Node> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Node>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Node> CreateNode(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const slamd::flatb::Mat4 *transform = nullptr,
    ::flatbuffers::Offset<slamd::flatb::Geometry> geometry = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<slamd::flatb::ChildEntry>>> children = 0) {
  NodeBuilder builder_(_fbb);
  builder_.add_children(children);
  builder_.add_geometry(geometry);
  builder_.add_transform(transform);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Node> CreateNodeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const slamd::flatb::Mat4 *transform = nullptr,
    ::flatbuffers::Offset<slamd::flatb::Geometry> geometry = 0,
    const std::vector<::flatbuffers::Offset<slamd::flatb::ChildEntry>> *children = nullptr) {
  auto children__ = children ? _fbb.CreateVector<::flatbuffers::Offset<slamd::flatb::ChildEntry>>(*children) : 0;
  return slamd::flatb::CreateNode(
      _fbb,
      transform,
      geometry,
      children__);
}

struct Tree FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TreeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_ROOT = 6
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const slamd::flatb::Node *root() const {
    return GetPointer<const slamd::flatb::Node *>(VT_ROOT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyOffset(verifier, VT_ROOT) &&
           verifier.VerifyTable(root()) &&
           verifier.EndTable();
  }
};

struct TreeBuilder {
  typedef Tree Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(Tree::VT_ID, id, 0);
  }
  void add_root(::flatbuffers::Offset<slamd::flatb::Node> root) {
    fbb_.AddOffset(Tree::VT_ROOT, root);
  }
  explicit TreeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Tree> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Tree>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Tree> CreateTree(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    ::flatbuffers::Offset<slamd::flatb::Node> root = 0) {
  TreeBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_root(root);
  return builder_.Finish();
}

struct View FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ViewBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TREE_ID = 6,
    VT_VIEW_TYPE = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  uint64_t tree_id() const {
    return GetField<uint64_t>(VT_TREE_ID, 0);
  }
  slamd::flatb::ViewType view_type() const {
    return static_cast<slamd::flatb::ViewType>(GetField<int8_t>(VT_VIEW_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint64_t>(verifier, VT_TREE_ID, 8) &&
           VerifyField<int8_t>(verifier, VT_VIEW_TYPE, 1) &&
           verifier.EndTable();
  }
};

struct ViewBuilder {
  typedef View Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(View::VT_NAME, name);
  }
  void add_tree_id(uint64_t tree_id) {
    fbb_.AddElement<uint64_t>(View::VT_TREE_ID, tree_id, 0);
  }
  void add_view_type(slamd::flatb::ViewType view_type) {
    fbb_.AddElement<int8_t>(View::VT_VIEW_TYPE, static_cast<int8_t>(view_type), 0);
  }
  explicit ViewBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<View> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<View>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<View> CreateView(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    uint64_t tree_id = 0,
    slamd::flatb::ViewType view_type = slamd::flatb::ViewType_NONE) {
  ViewBuilder builder_(_fbb);
  builder_.add_tree_id(tree_id);
  builder_.add_name(name);
  builder_.add_view_type(view_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<View> CreateViewDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint64_t tree_id = 0,
    slamd::flatb::ViewType view_type = slamd::flatb::ViewType_NONE) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return slamd::flatb::CreateView(
      _fbb,
      name__,
      tree_id,
      view_type);
}

struct InitialState FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef InitialStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_VIEWS = 6,
    VT_TREES = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<slamd::flatb::View>> *views() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<slamd::flatb::View>> *>(VT_VIEWS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<slamd::flatb::Tree>> *trees() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<slamd::flatb::Tree>> *>(VT_TREES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_VIEWS) &&
           verifier.VerifyVector(views()) &&
           verifier.VerifyVectorOfTables(views()) &&
           VerifyOffset(verifier, VT_TREES) &&
           verifier.VerifyVector(trees()) &&
           verifier.VerifyVectorOfTables(trees()) &&
           verifier.EndTable();
  }
};

struct InitialStateBuilder {
  typedef InitialState Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(InitialState::VT_NAME, name);
  }
  void add_views(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<slamd::flatb::View>>> views) {
    fbb_.AddOffset(InitialState::VT_VIEWS, views);
  }
  void add_trees(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<slamd::flatb::Tree>>> trees) {
    fbb_.AddOffset(InitialState::VT_TREES, trees);
  }
  explicit InitialStateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<InitialState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<InitialState>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<InitialState> CreateInitialState(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<slamd::flatb::View>>> views = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<slamd::flatb::Tree>>> trees = 0) {
  InitialStateBuilder builder_(_fbb);
  builder_.add_trees(trees);
  builder_.add_views(views);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<InitialState> CreateInitialStateDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<::flatbuffers::Offset<slamd::flatb::View>> *views = nullptr,
    const std::vector<::flatbuffers::Offset<slamd::flatb::Tree>> *trees = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto views__ = views ? _fbb.CreateVector<::flatbuffers::Offset<slamd::flatb::View>>(*views) : 0;
  auto trees__ = trees ? _fbb.CreateVector<::flatbuffers::Offset<slamd::flatb::Tree>>(*trees) : 0;
  return slamd::flatb::CreateInitialState(
      _fbb,
      name__,
      views__,
      trees__);
}

inline const slamd::flatb::InitialState *GetInitialState(const void *buf) {
  return ::flatbuffers::GetRoot<slamd::flatb::InitialState>(buf);
}

inline const slamd::flatb::InitialState *GetSizePrefixedInitialState(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<slamd::flatb::InitialState>(buf);
}

inline bool VerifyInitialStateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<slamd::flatb::InitialState>(nullptr);
}

inline bool VerifySizePrefixedInitialStateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<slamd::flatb::InitialState>(nullptr);
}

inline void FinishInitialStateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<slamd::flatb::InitialState> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInitialStateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<slamd::flatb::InitialState> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flatb
}  // namespace slamd

#endif  // FLATBUFFERS_GENERATED_VISUALIZER_SLAMD_FLATB_H_
