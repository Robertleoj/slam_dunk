// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GEOMETRY_SLAMD_FLATB_H_
#define FLATBUFFERS_GENERATED_GEOMETRY_SLAMD_FLATB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "primitives_generated.h"

namespace slamd {
namespace flatb {

struct Triad;
struct TriadBuilder;

struct Circles2D;
struct Circles2DBuilder;

struct CameraFrustum;
struct CameraFrustumBuilder;

struct PointCloud;
struct PointCloudBuilder;

struct Image;
struct ImageBuilder;

struct Points2D;
struct Points2DBuilder;

struct Box;
struct BoxBuilder;

struct Sphere;
struct SphereBuilder;

struct Arrows;
struct ArrowsBuilder;

struct PolyLine;
struct PolyLineBuilder;

struct PolyLine2D;
struct PolyLine2DBuilder;

struct Mesh;
struct MeshBuilder;

struct Plane;
struct PlaneBuilder;

struct Geometry;
struct GeometryBuilder;

enum GeometryUnion : uint8_t {
  GeometryUnion_NONE = 0,
  GeometryUnion_triad = 1,
  GeometryUnion_circles_2d = 2,
  GeometryUnion_camera_frustum = 3,
  GeometryUnion_point_cloud = 4,
  GeometryUnion_image = 5,
  GeometryUnion_points_2d = 6,
  GeometryUnion_box = 7,
  GeometryUnion_sphere = 8,
  GeometryUnion_arrows = 9,
  GeometryUnion_poly_line = 10,
  GeometryUnion_poly_line_2d = 11,
  GeometryUnion_mesh = 12,
  GeometryUnion_plane = 13,
  GeometryUnion_MIN = GeometryUnion_NONE,
  GeometryUnion_MAX = GeometryUnion_plane
};

inline const GeometryUnion (&EnumValuesGeometryUnion())[14] {
  static const GeometryUnion values[] = {
    GeometryUnion_NONE,
    GeometryUnion_triad,
    GeometryUnion_circles_2d,
    GeometryUnion_camera_frustum,
    GeometryUnion_point_cloud,
    GeometryUnion_image,
    GeometryUnion_points_2d,
    GeometryUnion_box,
    GeometryUnion_sphere,
    GeometryUnion_arrows,
    GeometryUnion_poly_line,
    GeometryUnion_poly_line_2d,
    GeometryUnion_mesh,
    GeometryUnion_plane
  };
  return values;
}

inline const char * const *EnumNamesGeometryUnion() {
  static const char * const names[15] = {
    "NONE",
    "triad",
    "circles_2d",
    "camera_frustum",
    "point_cloud",
    "image",
    "points_2d",
    "box",
    "sphere",
    "arrows",
    "poly_line",
    "poly_line_2d",
    "mesh",
    "plane",
    nullptr
  };
  return names;
}

inline const char *EnumNameGeometryUnion(GeometryUnion e) {
  if (::flatbuffers::IsOutRange(e, GeometryUnion_NONE, GeometryUnion_plane)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGeometryUnion()[index];
}

template<typename T> struct GeometryUnionTraits {
  static const GeometryUnion enum_value = GeometryUnion_NONE;
};

template<> struct GeometryUnionTraits<slamd::flatb::Triad> {
  static const GeometryUnion enum_value = GeometryUnion_triad;
};

template<> struct GeometryUnionTraits<slamd::flatb::Circles2D> {
  static const GeometryUnion enum_value = GeometryUnion_circles_2d;
};

template<> struct GeometryUnionTraits<slamd::flatb::CameraFrustum> {
  static const GeometryUnion enum_value = GeometryUnion_camera_frustum;
};

template<> struct GeometryUnionTraits<slamd::flatb::PointCloud> {
  static const GeometryUnion enum_value = GeometryUnion_point_cloud;
};

template<> struct GeometryUnionTraits<slamd::flatb::Image> {
  static const GeometryUnion enum_value = GeometryUnion_image;
};

template<> struct GeometryUnionTraits<slamd::flatb::Points2D> {
  static const GeometryUnion enum_value = GeometryUnion_points_2d;
};

template<> struct GeometryUnionTraits<slamd::flatb::Box> {
  static const GeometryUnion enum_value = GeometryUnion_box;
};

template<> struct GeometryUnionTraits<slamd::flatb::Sphere> {
  static const GeometryUnion enum_value = GeometryUnion_sphere;
};

template<> struct GeometryUnionTraits<slamd::flatb::Arrows> {
  static const GeometryUnion enum_value = GeometryUnion_arrows;
};

template<> struct GeometryUnionTraits<slamd::flatb::PolyLine> {
  static const GeometryUnion enum_value = GeometryUnion_poly_line;
};

template<> struct GeometryUnionTraits<slamd::flatb::PolyLine2D> {
  static const GeometryUnion enum_value = GeometryUnion_poly_line_2d;
};

template<> struct GeometryUnionTraits<slamd::flatb::Mesh> {
  static const GeometryUnion enum_value = GeometryUnion_mesh;
};

template<> struct GeometryUnionTraits<slamd::flatb::Plane> {
  static const GeometryUnion enum_value = GeometryUnion_plane;
};

bool VerifyGeometryUnion(::flatbuffers::Verifier &verifier, const void *obj, GeometryUnion type);
bool VerifyGeometryUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct Triad FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TriadBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SCALE = 4,
    VT_THICKNESS = 6,
    VT_POSE = 8
  };
  float scale() const {
    return GetField<float>(VT_SCALE, 0.0f);
  }
  float thickness() const {
    return GetField<float>(VT_THICKNESS, 0.0f);
  }
  const slamd::flatb::Mat4 *pose() const {
    return GetStruct<const slamd::flatb::Mat4 *>(VT_POSE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_SCALE, 4) &&
           VerifyField<float>(verifier, VT_THICKNESS, 4) &&
           VerifyField<slamd::flatb::Mat4>(verifier, VT_POSE, 4) &&
           verifier.EndTable();
  }
};

struct TriadBuilder {
  typedef Triad Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_scale(float scale) {
    fbb_.AddElement<float>(Triad::VT_SCALE, scale, 0.0f);
  }
  void add_thickness(float thickness) {
    fbb_.AddElement<float>(Triad::VT_THICKNESS, thickness, 0.0f);
  }
  void add_pose(const slamd::flatb::Mat4 *pose) {
    fbb_.AddStruct(Triad::VT_POSE, pose);
  }
  explicit TriadBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Triad> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Triad>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Triad> CreateTriad(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float scale = 0.0f,
    float thickness = 0.0f,
    const slamd::flatb::Mat4 *pose = nullptr) {
  TriadBuilder builder_(_fbb);
  builder_.add_pose(pose);
  builder_.add_thickness(thickness);
  builder_.add_scale(scale);
  return builder_.Finish();
}

struct Circles2D FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Circles2DBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITIONS = 4,
    VT_COLORS = 6,
    VT_RADII = 8,
    VT_THICKNESS = 10
  };
  const ::flatbuffers::Vector<const slamd::flatb::Vec2 *> *positions() const {
    return GetPointer<const ::flatbuffers::Vector<const slamd::flatb::Vec2 *> *>(VT_POSITIONS);
  }
  const ::flatbuffers::Vector<const slamd::flatb::Vec3 *> *colors() const {
    return GetPointer<const ::flatbuffers::Vector<const slamd::flatb::Vec3 *> *>(VT_COLORS);
  }
  const ::flatbuffers::Vector<float> *radii() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_RADII);
  }
  float thickness() const {
    return GetField<float>(VT_THICKNESS, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITIONS) &&
           verifier.VerifyVector(positions()) &&
           VerifyOffset(verifier, VT_COLORS) &&
           verifier.VerifyVector(colors()) &&
           VerifyOffset(verifier, VT_RADII) &&
           verifier.VerifyVector(radii()) &&
           VerifyField<float>(verifier, VT_THICKNESS, 4) &&
           verifier.EndTable();
  }
};

struct Circles2DBuilder {
  typedef Circles2D Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_positions(::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec2 *>> positions) {
    fbb_.AddOffset(Circles2D::VT_POSITIONS, positions);
  }
  void add_colors(::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec3 *>> colors) {
    fbb_.AddOffset(Circles2D::VT_COLORS, colors);
  }
  void add_radii(::flatbuffers::Offset<::flatbuffers::Vector<float>> radii) {
    fbb_.AddOffset(Circles2D::VT_RADII, radii);
  }
  void add_thickness(float thickness) {
    fbb_.AddElement<float>(Circles2D::VT_THICKNESS, thickness, 0.0f);
  }
  explicit Circles2DBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Circles2D> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Circles2D>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Circles2D> CreateCircles2D(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec2 *>> positions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec3 *>> colors = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> radii = 0,
    float thickness = 0.0f) {
  Circles2DBuilder builder_(_fbb);
  builder_.add_thickness(thickness);
  builder_.add_radii(radii);
  builder_.add_colors(colors);
  builder_.add_positions(positions);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Circles2D> CreateCircles2DDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<slamd::flatb::Vec2> *positions = nullptr,
    const std::vector<slamd::flatb::Vec3> *colors = nullptr,
    const std::vector<float> *radii = nullptr,
    float thickness = 0.0f) {
  auto positions__ = positions ? _fbb.CreateVectorOfStructs<slamd::flatb::Vec2>(*positions) : 0;
  auto colors__ = colors ? _fbb.CreateVectorOfStructs<slamd::flatb::Vec3>(*colors) : 0;
  auto radii__ = radii ? _fbb.CreateVector<float>(*radii) : 0;
  return slamd::flatb::CreateCircles2D(
      _fbb,
      positions__,
      colors__,
      radii__,
      thickness);
}

struct CameraFrustum FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CameraFrustumBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INTRINSICS = 4,
    VT_IMAGE_WIDTH = 6,
    VT_IMAGE_HEIGHT = 8,
    VT_SCALE = 10,
    VT_IMAGE = 12
  };
  const slamd::flatb::Mat3 *intrinsics() const {
    return GetStruct<const slamd::flatb::Mat3 *>(VT_INTRINSICS);
  }
  uint32_t image_width() const {
    return GetField<uint32_t>(VT_IMAGE_WIDTH, 0);
  }
  uint32_t image_height() const {
    return GetField<uint32_t>(VT_IMAGE_HEIGHT, 0);
  }
  float scale() const {
    return GetField<float>(VT_SCALE, 0.0f);
  }
  const slamd::flatb::ImageData *image() const {
    return GetPointer<const slamd::flatb::ImageData *>(VT_IMAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<slamd::flatb::Mat3>(verifier, VT_INTRINSICS, 4) &&
           VerifyField<uint32_t>(verifier, VT_IMAGE_WIDTH, 4) &&
           VerifyField<uint32_t>(verifier, VT_IMAGE_HEIGHT, 4) &&
           VerifyField<float>(verifier, VT_SCALE, 4) &&
           VerifyOffset(verifier, VT_IMAGE) &&
           verifier.VerifyTable(image()) &&
           verifier.EndTable();
  }
};

struct CameraFrustumBuilder {
  typedef CameraFrustum Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_intrinsics(const slamd::flatb::Mat3 *intrinsics) {
    fbb_.AddStruct(CameraFrustum::VT_INTRINSICS, intrinsics);
  }
  void add_image_width(uint32_t image_width) {
    fbb_.AddElement<uint32_t>(CameraFrustum::VT_IMAGE_WIDTH, image_width, 0);
  }
  void add_image_height(uint32_t image_height) {
    fbb_.AddElement<uint32_t>(CameraFrustum::VT_IMAGE_HEIGHT, image_height, 0);
  }
  void add_scale(float scale) {
    fbb_.AddElement<float>(CameraFrustum::VT_SCALE, scale, 0.0f);
  }
  void add_image(::flatbuffers::Offset<slamd::flatb::ImageData> image) {
    fbb_.AddOffset(CameraFrustum::VT_IMAGE, image);
  }
  explicit CameraFrustumBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CameraFrustum> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CameraFrustum>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CameraFrustum> CreateCameraFrustum(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const slamd::flatb::Mat3 *intrinsics = nullptr,
    uint32_t image_width = 0,
    uint32_t image_height = 0,
    float scale = 0.0f,
    ::flatbuffers::Offset<slamd::flatb::ImageData> image = 0) {
  CameraFrustumBuilder builder_(_fbb);
  builder_.add_image(image);
  builder_.add_scale(scale);
  builder_.add_image_height(image_height);
  builder_.add_image_width(image_width);
  builder_.add_intrinsics(intrinsics);
  return builder_.Finish();
}

struct PointCloud FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PointCloudBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITIONS = 4,
    VT_COLORS = 6,
    VT_RADII = 8,
    VT_MIN_BRIGHTNESS = 10
  };
  const ::flatbuffers::Vector<const slamd::flatb::Vec3 *> *positions() const {
    return GetPointer<const ::flatbuffers::Vector<const slamd::flatb::Vec3 *> *>(VT_POSITIONS);
  }
  const ::flatbuffers::Vector<const slamd::flatb::Vec3 *> *colors() const {
    return GetPointer<const ::flatbuffers::Vector<const slamd::flatb::Vec3 *> *>(VT_COLORS);
  }
  const ::flatbuffers::Vector<float> *radii() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_RADII);
  }
  float min_brightness() const {
    return GetField<float>(VT_MIN_BRIGHTNESS, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITIONS) &&
           verifier.VerifyVector(positions()) &&
           VerifyOffset(verifier, VT_COLORS) &&
           verifier.VerifyVector(colors()) &&
           VerifyOffset(verifier, VT_RADII) &&
           verifier.VerifyVector(radii()) &&
           VerifyField<float>(verifier, VT_MIN_BRIGHTNESS, 4) &&
           verifier.EndTable();
  }
};

struct PointCloudBuilder {
  typedef PointCloud Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_positions(::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec3 *>> positions) {
    fbb_.AddOffset(PointCloud::VT_POSITIONS, positions);
  }
  void add_colors(::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec3 *>> colors) {
    fbb_.AddOffset(PointCloud::VT_COLORS, colors);
  }
  void add_radii(::flatbuffers::Offset<::flatbuffers::Vector<float>> radii) {
    fbb_.AddOffset(PointCloud::VT_RADII, radii);
  }
  void add_min_brightness(float min_brightness) {
    fbb_.AddElement<float>(PointCloud::VT_MIN_BRIGHTNESS, min_brightness, 0.0f);
  }
  explicit PointCloudBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PointCloud> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PointCloud>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PointCloud> CreatePointCloud(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec3 *>> positions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec3 *>> colors = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> radii = 0,
    float min_brightness = 0.0f) {
  PointCloudBuilder builder_(_fbb);
  builder_.add_min_brightness(min_brightness);
  builder_.add_radii(radii);
  builder_.add_colors(colors);
  builder_.add_positions(positions);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PointCloud> CreatePointCloudDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<slamd::flatb::Vec3> *positions = nullptr,
    const std::vector<slamd::flatb::Vec3> *colors = nullptr,
    const std::vector<float> *radii = nullptr,
    float min_brightness = 0.0f) {
  auto positions__ = positions ? _fbb.CreateVectorOfStructs<slamd::flatb::Vec3>(*positions) : 0;
  auto colors__ = colors ? _fbb.CreateVectorOfStructs<slamd::flatb::Vec3>(*colors) : 0;
  auto radii__ = radii ? _fbb.CreateVector<float>(*radii) : 0;
  return slamd::flatb::CreatePointCloud(
      _fbb,
      positions__,
      colors__,
      radii__,
      min_brightness);
}

struct Image FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ImageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IMG = 4,
    VT_NORMALIZED = 6
  };
  const slamd::flatb::ImageData *img() const {
    return GetPointer<const slamd::flatb::ImageData *>(VT_IMG);
  }
  bool normalized() const {
    return GetField<uint8_t>(VT_NORMALIZED, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IMG) &&
           verifier.VerifyTable(img()) &&
           VerifyField<uint8_t>(verifier, VT_NORMALIZED, 1) &&
           verifier.EndTable();
  }
};

struct ImageBuilder {
  typedef Image Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_img(::flatbuffers::Offset<slamd::flatb::ImageData> img) {
    fbb_.AddOffset(Image::VT_IMG, img);
  }
  void add_normalized(bool normalized) {
    fbb_.AddElement<uint8_t>(Image::VT_NORMALIZED, static_cast<uint8_t>(normalized), 0);
  }
  explicit ImageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Image> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Image>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Image> CreateImage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<slamd::flatb::ImageData> img = 0,
    bool normalized = false) {
  ImageBuilder builder_(_fbb);
  builder_.add_img(img);
  builder_.add_normalized(normalized);
  return builder_.Finish();
}

struct Points2D FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Points2DBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITIONS = 4,
    VT_COLORS = 6,
    VT_RADII = 8
  };
  const ::flatbuffers::Vector<const slamd::flatb::Vec2 *> *positions() const {
    return GetPointer<const ::flatbuffers::Vector<const slamd::flatb::Vec2 *> *>(VT_POSITIONS);
  }
  const ::flatbuffers::Vector<const slamd::flatb::Vec3 *> *colors() const {
    return GetPointer<const ::flatbuffers::Vector<const slamd::flatb::Vec3 *> *>(VT_COLORS);
  }
  const ::flatbuffers::Vector<float> *radii() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_RADII);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITIONS) &&
           verifier.VerifyVector(positions()) &&
           VerifyOffset(verifier, VT_COLORS) &&
           verifier.VerifyVector(colors()) &&
           VerifyOffset(verifier, VT_RADII) &&
           verifier.VerifyVector(radii()) &&
           verifier.EndTable();
  }
};

struct Points2DBuilder {
  typedef Points2D Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_positions(::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec2 *>> positions) {
    fbb_.AddOffset(Points2D::VT_POSITIONS, positions);
  }
  void add_colors(::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec3 *>> colors) {
    fbb_.AddOffset(Points2D::VT_COLORS, colors);
  }
  void add_radii(::flatbuffers::Offset<::flatbuffers::Vector<float>> radii) {
    fbb_.AddOffset(Points2D::VT_RADII, radii);
  }
  explicit Points2DBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Points2D> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Points2D>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Points2D> CreatePoints2D(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec2 *>> positions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec3 *>> colors = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> radii = 0) {
  Points2DBuilder builder_(_fbb);
  builder_.add_radii(radii);
  builder_.add_colors(colors);
  builder_.add_positions(positions);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Points2D> CreatePoints2DDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<slamd::flatb::Vec2> *positions = nullptr,
    const std::vector<slamd::flatb::Vec3> *colors = nullptr,
    const std::vector<float> *radii = nullptr) {
  auto positions__ = positions ? _fbb.CreateVectorOfStructs<slamd::flatb::Vec2>(*positions) : 0;
  auto colors__ = colors ? _fbb.CreateVectorOfStructs<slamd::flatb::Vec3>(*colors) : 0;
  auto radii__ = radii ? _fbb.CreateVector<float>(*radii) : 0;
  return slamd::flatb::CreatePoints2D(
      _fbb,
      positions__,
      colors__,
      radii__);
}

struct Box FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BoxBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct BoxBuilder {
  typedef Box Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit BoxBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Box> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Box>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Box> CreateBox(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  BoxBuilder builder_(_fbb);
  return builder_.Finish();
}

struct Sphere FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SphereBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RADIUS = 4,
    VT_COLOR = 6
  };
  float radius() const {
    return GetField<float>(VT_RADIUS, 0.0f);
  }
  const slamd::flatb::Vec3 *color() const {
    return GetStruct<const slamd::flatb::Vec3 *>(VT_COLOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_RADIUS, 4) &&
           VerifyField<slamd::flatb::Vec3>(verifier, VT_COLOR, 4) &&
           verifier.EndTable();
  }
};

struct SphereBuilder {
  typedef Sphere Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_radius(float radius) {
    fbb_.AddElement<float>(Sphere::VT_RADIUS, radius, 0.0f);
  }
  void add_color(const slamd::flatb::Vec3 *color) {
    fbb_.AddStruct(Sphere::VT_COLOR, color);
  }
  explicit SphereBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Sphere> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Sphere>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Sphere> CreateSphere(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float radius = 0.0f,
    const slamd::flatb::Vec3 *color = nullptr) {
  SphereBuilder builder_(_fbb);
  builder_.add_color(color);
  builder_.add_radius(radius);
  return builder_.Finish();
}

struct Arrows FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ArrowsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STARTS = 4,
    VT_ENDS = 6,
    VT_COLORS = 8,
    VT_THICKNESS = 10
  };
  const ::flatbuffers::Vector<const slamd::flatb::Vec3 *> *starts() const {
    return GetPointer<const ::flatbuffers::Vector<const slamd::flatb::Vec3 *> *>(VT_STARTS);
  }
  const ::flatbuffers::Vector<const slamd::flatb::Vec3 *> *ends() const {
    return GetPointer<const ::flatbuffers::Vector<const slamd::flatb::Vec3 *> *>(VT_ENDS);
  }
  const ::flatbuffers::Vector<const slamd::flatb::Vec3 *> *colors() const {
    return GetPointer<const ::flatbuffers::Vector<const slamd::flatb::Vec3 *> *>(VT_COLORS);
  }
  float thickness() const {
    return GetField<float>(VT_THICKNESS, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STARTS) &&
           verifier.VerifyVector(starts()) &&
           VerifyOffset(verifier, VT_ENDS) &&
           verifier.VerifyVector(ends()) &&
           VerifyOffset(verifier, VT_COLORS) &&
           verifier.VerifyVector(colors()) &&
           VerifyField<float>(verifier, VT_THICKNESS, 4) &&
           verifier.EndTable();
  }
};

struct ArrowsBuilder {
  typedef Arrows Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_starts(::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec3 *>> starts) {
    fbb_.AddOffset(Arrows::VT_STARTS, starts);
  }
  void add_ends(::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec3 *>> ends) {
    fbb_.AddOffset(Arrows::VT_ENDS, ends);
  }
  void add_colors(::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec3 *>> colors) {
    fbb_.AddOffset(Arrows::VT_COLORS, colors);
  }
  void add_thickness(float thickness) {
    fbb_.AddElement<float>(Arrows::VT_THICKNESS, thickness, 0.0f);
  }
  explicit ArrowsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Arrows> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Arrows>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Arrows> CreateArrows(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec3 *>> starts = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec3 *>> ends = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec3 *>> colors = 0,
    float thickness = 0.0f) {
  ArrowsBuilder builder_(_fbb);
  builder_.add_thickness(thickness);
  builder_.add_colors(colors);
  builder_.add_ends(ends);
  builder_.add_starts(starts);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Arrows> CreateArrowsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<slamd::flatb::Vec3> *starts = nullptr,
    const std::vector<slamd::flatb::Vec3> *ends = nullptr,
    const std::vector<slamd::flatb::Vec3> *colors = nullptr,
    float thickness = 0.0f) {
  auto starts__ = starts ? _fbb.CreateVectorOfStructs<slamd::flatb::Vec3>(*starts) : 0;
  auto ends__ = ends ? _fbb.CreateVectorOfStructs<slamd::flatb::Vec3>(*ends) : 0;
  auto colors__ = colors ? _fbb.CreateVectorOfStructs<slamd::flatb::Vec3>(*colors) : 0;
  return slamd::flatb::CreateArrows(
      _fbb,
      starts__,
      ends__,
      colors__,
      thickness);
}

struct PolyLine FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PolyLineBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POINTS = 4,
    VT_THICKNESS = 6,
    VT_COLOR = 8,
    VT_MIN_BRIGHTNESS = 10
  };
  const ::flatbuffers::Vector<const slamd::flatb::Vec3 *> *points() const {
    return GetPointer<const ::flatbuffers::Vector<const slamd::flatb::Vec3 *> *>(VT_POINTS);
  }
  float thickness() const {
    return GetField<float>(VT_THICKNESS, 0.0f);
  }
  const slamd::flatb::Vec3 *color() const {
    return GetStruct<const slamd::flatb::Vec3 *>(VT_COLOR);
  }
  float min_brightness() const {
    return GetField<float>(VT_MIN_BRIGHTNESS, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POINTS) &&
           verifier.VerifyVector(points()) &&
           VerifyField<float>(verifier, VT_THICKNESS, 4) &&
           VerifyField<slamd::flatb::Vec3>(verifier, VT_COLOR, 4) &&
           VerifyField<float>(verifier, VT_MIN_BRIGHTNESS, 4) &&
           verifier.EndTable();
  }
};

struct PolyLineBuilder {
  typedef PolyLine Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_points(::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec3 *>> points) {
    fbb_.AddOffset(PolyLine::VT_POINTS, points);
  }
  void add_thickness(float thickness) {
    fbb_.AddElement<float>(PolyLine::VT_THICKNESS, thickness, 0.0f);
  }
  void add_color(const slamd::flatb::Vec3 *color) {
    fbb_.AddStruct(PolyLine::VT_COLOR, color);
  }
  void add_min_brightness(float min_brightness) {
    fbb_.AddElement<float>(PolyLine::VT_MIN_BRIGHTNESS, min_brightness, 0.0f);
  }
  explicit PolyLineBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PolyLine> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PolyLine>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PolyLine> CreatePolyLine(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec3 *>> points = 0,
    float thickness = 0.0f,
    const slamd::flatb::Vec3 *color = nullptr,
    float min_brightness = 0.0f) {
  PolyLineBuilder builder_(_fbb);
  builder_.add_min_brightness(min_brightness);
  builder_.add_color(color);
  builder_.add_thickness(thickness);
  builder_.add_points(points);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PolyLine> CreatePolyLineDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<slamd::flatb::Vec3> *points = nullptr,
    float thickness = 0.0f,
    const slamd::flatb::Vec3 *color = nullptr,
    float min_brightness = 0.0f) {
  auto points__ = points ? _fbb.CreateVectorOfStructs<slamd::flatb::Vec3>(*points) : 0;
  return slamd::flatb::CreatePolyLine(
      _fbb,
      points__,
      thickness,
      color,
      min_brightness);
}

struct PolyLine2D FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PolyLine2DBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POINTS = 4,
    VT_COLOR = 6,
    VT_THICKNESS = 8
  };
  const ::flatbuffers::Vector<const slamd::flatb::Vec2 *> *points() const {
    return GetPointer<const ::flatbuffers::Vector<const slamd::flatb::Vec2 *> *>(VT_POINTS);
  }
  const slamd::flatb::Vec3 *color() const {
    return GetStruct<const slamd::flatb::Vec3 *>(VT_COLOR);
  }
  float thickness() const {
    return GetField<float>(VT_THICKNESS, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POINTS) &&
           verifier.VerifyVector(points()) &&
           VerifyField<slamd::flatb::Vec3>(verifier, VT_COLOR, 4) &&
           VerifyField<float>(verifier, VT_THICKNESS, 4) &&
           verifier.EndTable();
  }
};

struct PolyLine2DBuilder {
  typedef PolyLine2D Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_points(::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec2 *>> points) {
    fbb_.AddOffset(PolyLine2D::VT_POINTS, points);
  }
  void add_color(const slamd::flatb::Vec3 *color) {
    fbb_.AddStruct(PolyLine2D::VT_COLOR, color);
  }
  void add_thickness(float thickness) {
    fbb_.AddElement<float>(PolyLine2D::VT_THICKNESS, thickness, 0.0f);
  }
  explicit PolyLine2DBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PolyLine2D> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PolyLine2D>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PolyLine2D> CreatePolyLine2D(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const slamd::flatb::Vec2 *>> points = 0,
    const slamd::flatb::Vec3 *color = nullptr,
    float thickness = 0.0f) {
  PolyLine2DBuilder builder_(_fbb);
  builder_.add_thickness(thickness);
  builder_.add_color(color);
  builder_.add_points(points);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PolyLine2D> CreatePolyLine2DDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<slamd::flatb::Vec2> *points = nullptr,
    const slamd::flatb::Vec3 *color = nullptr,
    float thickness = 0.0f) {
  auto points__ = points ? _fbb.CreateVectorOfStructs<slamd::flatb::Vec2>(*points) : 0;
  return slamd::flatb::CreatePolyLine2D(
      _fbb,
      points__,
      color,
      thickness);
}

struct Mesh FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MeshBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4,
    VT_MIN_BRIGHTNESS = 6
  };
  const slamd::flatb::MeshData *data() const {
    return GetPointer<const slamd::flatb::MeshData *>(VT_DATA);
  }
  float min_brightness() const {
    return GetField<float>(VT_MIN_BRIGHTNESS, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyTable(data()) &&
           VerifyField<float>(verifier, VT_MIN_BRIGHTNESS, 4) &&
           verifier.EndTable();
  }
};

struct MeshBuilder {
  typedef Mesh Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<slamd::flatb::MeshData> data) {
    fbb_.AddOffset(Mesh::VT_DATA, data);
  }
  void add_min_brightness(float min_brightness) {
    fbb_.AddElement<float>(Mesh::VT_MIN_BRIGHTNESS, min_brightness, 0.0f);
  }
  explicit MeshBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Mesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Mesh>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Mesh> CreateMesh(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<slamd::flatb::MeshData> data = 0,
    float min_brightness = 0.0f) {
  MeshBuilder builder_(_fbb);
  builder_.add_min_brightness(min_brightness);
  builder_.add_data(data);
  return builder_.Finish();
}

struct Plane FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlaneBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NORMAL = 4,
    VT_POINT = 6,
    VT_COLOR = 8,
    VT_RADIUS = 10,
    VT_ALPHA = 12
  };
  const slamd::flatb::Vec3 *normal() const {
    return GetStruct<const slamd::flatb::Vec3 *>(VT_NORMAL);
  }
  const slamd::flatb::Vec3 *point() const {
    return GetStruct<const slamd::flatb::Vec3 *>(VT_POINT);
  }
  const slamd::flatb::Vec3 *color() const {
    return GetStruct<const slamd::flatb::Vec3 *>(VT_COLOR);
  }
  float radius() const {
    return GetField<float>(VT_RADIUS, 0.0f);
  }
  float alpha() const {
    return GetField<float>(VT_ALPHA, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<slamd::flatb::Vec3>(verifier, VT_NORMAL, 4) &&
           VerifyField<slamd::flatb::Vec3>(verifier, VT_POINT, 4) &&
           VerifyField<slamd::flatb::Vec3>(verifier, VT_COLOR, 4) &&
           VerifyField<float>(verifier, VT_RADIUS, 4) &&
           VerifyField<float>(verifier, VT_ALPHA, 4) &&
           verifier.EndTable();
  }
};

struct PlaneBuilder {
  typedef Plane Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_normal(const slamd::flatb::Vec3 *normal) {
    fbb_.AddStruct(Plane::VT_NORMAL, normal);
  }
  void add_point(const slamd::flatb::Vec3 *point) {
    fbb_.AddStruct(Plane::VT_POINT, point);
  }
  void add_color(const slamd::flatb::Vec3 *color) {
    fbb_.AddStruct(Plane::VT_COLOR, color);
  }
  void add_radius(float radius) {
    fbb_.AddElement<float>(Plane::VT_RADIUS, radius, 0.0f);
  }
  void add_alpha(float alpha) {
    fbb_.AddElement<float>(Plane::VT_ALPHA, alpha, 0.0f);
  }
  explicit PlaneBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Plane> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Plane>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Plane> CreatePlane(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const slamd::flatb::Vec3 *normal = nullptr,
    const slamd::flatb::Vec3 *point = nullptr,
    const slamd::flatb::Vec3 *color = nullptr,
    float radius = 0.0f,
    float alpha = 0.0f) {
  PlaneBuilder builder_(_fbb);
  builder_.add_alpha(alpha);
  builder_.add_radius(radius);
  builder_.add_color(color);
  builder_.add_point(point);
  builder_.add_normal(normal);
  return builder_.Finish();
}

struct Geometry FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GeometryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GEOMETRY_ID = 4,
    VT_GEOMETRY_TYPE = 6,
    VT_GEOMETRY = 8
  };
  uint64_t geometry_id() const {
    return GetField<uint64_t>(VT_GEOMETRY_ID, 0);
  }
  slamd::flatb::GeometryUnion geometry_type() const {
    return static_cast<slamd::flatb::GeometryUnion>(GetField<uint8_t>(VT_GEOMETRY_TYPE, 0));
  }
  const void *geometry() const {
    return GetPointer<const void *>(VT_GEOMETRY);
  }
  template<typename T> const T *geometry_as() const;
  const slamd::flatb::Triad *geometry_as_triad() const {
    return geometry_type() == slamd::flatb::GeometryUnion_triad ? static_cast<const slamd::flatb::Triad *>(geometry()) : nullptr;
  }
  const slamd::flatb::Circles2D *geometry_as_circles_2d() const {
    return geometry_type() == slamd::flatb::GeometryUnion_circles_2d ? static_cast<const slamd::flatb::Circles2D *>(geometry()) : nullptr;
  }
  const slamd::flatb::CameraFrustum *geometry_as_camera_frustum() const {
    return geometry_type() == slamd::flatb::GeometryUnion_camera_frustum ? static_cast<const slamd::flatb::CameraFrustum *>(geometry()) : nullptr;
  }
  const slamd::flatb::PointCloud *geometry_as_point_cloud() const {
    return geometry_type() == slamd::flatb::GeometryUnion_point_cloud ? static_cast<const slamd::flatb::PointCloud *>(geometry()) : nullptr;
  }
  const slamd::flatb::Image *geometry_as_image() const {
    return geometry_type() == slamd::flatb::GeometryUnion_image ? static_cast<const slamd::flatb::Image *>(geometry()) : nullptr;
  }
  const slamd::flatb::Points2D *geometry_as_points_2d() const {
    return geometry_type() == slamd::flatb::GeometryUnion_points_2d ? static_cast<const slamd::flatb::Points2D *>(geometry()) : nullptr;
  }
  const slamd::flatb::Box *geometry_as_box() const {
    return geometry_type() == slamd::flatb::GeometryUnion_box ? static_cast<const slamd::flatb::Box *>(geometry()) : nullptr;
  }
  const slamd::flatb::Sphere *geometry_as_sphere() const {
    return geometry_type() == slamd::flatb::GeometryUnion_sphere ? static_cast<const slamd::flatb::Sphere *>(geometry()) : nullptr;
  }
  const slamd::flatb::Arrows *geometry_as_arrows() const {
    return geometry_type() == slamd::flatb::GeometryUnion_arrows ? static_cast<const slamd::flatb::Arrows *>(geometry()) : nullptr;
  }
  const slamd::flatb::PolyLine *geometry_as_poly_line() const {
    return geometry_type() == slamd::flatb::GeometryUnion_poly_line ? static_cast<const slamd::flatb::PolyLine *>(geometry()) : nullptr;
  }
  const slamd::flatb::PolyLine2D *geometry_as_poly_line_2d() const {
    return geometry_type() == slamd::flatb::GeometryUnion_poly_line_2d ? static_cast<const slamd::flatb::PolyLine2D *>(geometry()) : nullptr;
  }
  const slamd::flatb::Mesh *geometry_as_mesh() const {
    return geometry_type() == slamd::flatb::GeometryUnion_mesh ? static_cast<const slamd::flatb::Mesh *>(geometry()) : nullptr;
  }
  const slamd::flatb::Plane *geometry_as_plane() const {
    return geometry_type() == slamd::flatb::GeometryUnion_plane ? static_cast<const slamd::flatb::Plane *>(geometry()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_GEOMETRY_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_GEOMETRY_TYPE, 1) &&
           VerifyOffset(verifier, VT_GEOMETRY) &&
           VerifyGeometryUnion(verifier, geometry(), geometry_type()) &&
           verifier.EndTable();
  }
};

template<> inline const slamd::flatb::Triad *Geometry::geometry_as<slamd::flatb::Triad>() const {
  return geometry_as_triad();
}

template<> inline const slamd::flatb::Circles2D *Geometry::geometry_as<slamd::flatb::Circles2D>() const {
  return geometry_as_circles_2d();
}

template<> inline const slamd::flatb::CameraFrustum *Geometry::geometry_as<slamd::flatb::CameraFrustum>() const {
  return geometry_as_camera_frustum();
}

template<> inline const slamd::flatb::PointCloud *Geometry::geometry_as<slamd::flatb::PointCloud>() const {
  return geometry_as_point_cloud();
}

template<> inline const slamd::flatb::Image *Geometry::geometry_as<slamd::flatb::Image>() const {
  return geometry_as_image();
}

template<> inline const slamd::flatb::Points2D *Geometry::geometry_as<slamd::flatb::Points2D>() const {
  return geometry_as_points_2d();
}

template<> inline const slamd::flatb::Box *Geometry::geometry_as<slamd::flatb::Box>() const {
  return geometry_as_box();
}

template<> inline const slamd::flatb::Sphere *Geometry::geometry_as<slamd::flatb::Sphere>() const {
  return geometry_as_sphere();
}

template<> inline const slamd::flatb::Arrows *Geometry::geometry_as<slamd::flatb::Arrows>() const {
  return geometry_as_arrows();
}

template<> inline const slamd::flatb::PolyLine *Geometry::geometry_as<slamd::flatb::PolyLine>() const {
  return geometry_as_poly_line();
}

template<> inline const slamd::flatb::PolyLine2D *Geometry::geometry_as<slamd::flatb::PolyLine2D>() const {
  return geometry_as_poly_line_2d();
}

template<> inline const slamd::flatb::Mesh *Geometry::geometry_as<slamd::flatb::Mesh>() const {
  return geometry_as_mesh();
}

template<> inline const slamd::flatb::Plane *Geometry::geometry_as<slamd::flatb::Plane>() const {
  return geometry_as_plane();
}

struct GeometryBuilder {
  typedef Geometry Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_geometry_id(uint64_t geometry_id) {
    fbb_.AddElement<uint64_t>(Geometry::VT_GEOMETRY_ID, geometry_id, 0);
  }
  void add_geometry_type(slamd::flatb::GeometryUnion geometry_type) {
    fbb_.AddElement<uint8_t>(Geometry::VT_GEOMETRY_TYPE, static_cast<uint8_t>(geometry_type), 0);
  }
  void add_geometry(::flatbuffers::Offset<void> geometry) {
    fbb_.AddOffset(Geometry::VT_GEOMETRY, geometry);
  }
  explicit GeometryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Geometry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Geometry>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Geometry> CreateGeometry(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t geometry_id = 0,
    slamd::flatb::GeometryUnion geometry_type = slamd::flatb::GeometryUnion_NONE,
    ::flatbuffers::Offset<void> geometry = 0) {
  GeometryBuilder builder_(_fbb);
  builder_.add_geometry_id(geometry_id);
  builder_.add_geometry(geometry);
  builder_.add_geometry_type(geometry_type);
  return builder_.Finish();
}

inline bool VerifyGeometryUnion(::flatbuffers::Verifier &verifier, const void *obj, GeometryUnion type) {
  switch (type) {
    case GeometryUnion_NONE: {
      return true;
    }
    case GeometryUnion_triad: {
      auto ptr = reinterpret_cast<const slamd::flatb::Triad *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GeometryUnion_circles_2d: {
      auto ptr = reinterpret_cast<const slamd::flatb::Circles2D *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GeometryUnion_camera_frustum: {
      auto ptr = reinterpret_cast<const slamd::flatb::CameraFrustum *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GeometryUnion_point_cloud: {
      auto ptr = reinterpret_cast<const slamd::flatb::PointCloud *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GeometryUnion_image: {
      auto ptr = reinterpret_cast<const slamd::flatb::Image *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GeometryUnion_points_2d: {
      auto ptr = reinterpret_cast<const slamd::flatb::Points2D *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GeometryUnion_box: {
      auto ptr = reinterpret_cast<const slamd::flatb::Box *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GeometryUnion_sphere: {
      auto ptr = reinterpret_cast<const slamd::flatb::Sphere *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GeometryUnion_arrows: {
      auto ptr = reinterpret_cast<const slamd::flatb::Arrows *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GeometryUnion_poly_line: {
      auto ptr = reinterpret_cast<const slamd::flatb::PolyLine *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GeometryUnion_poly_line_2d: {
      auto ptr = reinterpret_cast<const slamd::flatb::PolyLine2D *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GeometryUnion_mesh: {
      auto ptr = reinterpret_cast<const slamd::flatb::Mesh *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GeometryUnion_plane: {
      auto ptr = reinterpret_cast<const slamd::flatb::Plane *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyGeometryUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyGeometryUnion(
        verifier,  values->Get(i), types->GetEnum<GeometryUnion>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace flatb
}  // namespace slamd

#endif  // FLATBUFFERS_GENERATED_GEOMETRY_SLAMD_FLATB_H_
