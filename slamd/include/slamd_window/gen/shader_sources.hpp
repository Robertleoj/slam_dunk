/**
 * This file is automatically generated, don't touch.
 */
#pragma once
#include <string>

namespace slamd {
namespace shader_source {

namespace arcball_indicator {
inline const std::string vert = R"( #version 330 core

layout(location = 0) in vec3 aPos;

uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;

void main() {
    vec4 worldPos = uModel * vec4(aPos, 1.0);
    vec4 vPos = uView * worldPos;

    gl_Position = uProjection * vPos;
}
 )";
inline const std::string frag = R"( #version 330 core

out vec4 FragColor;

uniform vec3 uColor;
uniform float uAlpha;

void main() {
    FragColor = vec4(uColor, uAlpha);
}
 )";
}  // namespace arcball_indicator

namespace image {
inline const std::string vert = R"( 
#version 330 core
layout(location = 0) in vec3 a_pos;
layout(location = 1) in vec2 aTexCoord;

out vec3 ourColor;
out vec2 TexCoord;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main() {
    gl_Position = projection * view * model * vec4(a_pos, 1.0);
    TexCoord = aTexCoord;
} )";
inline const std::string frag = R"( #version 330 core
out vec4 FragColor;

in vec2 TexCoord;

uniform sampler2D ourTexture;

void main() {
    FragColor = texture(ourTexture, TexCoord);
} )";
}  // namespace image

namespace mesh {
inline const std::string vert = R"( #version 330 core

layout(location = 0) in vec3 a_pos;
layout(location = 1) in vec3 a_color;
layout(location = 2) in vec3 aNormal;

out vec3 vertex_color;
out vec3 Normal;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main() {
    Normal = mat3(transpose(inverse(model))) * aNormal;
    gl_Position = projection * view * model * vec4(a_pos, 1.0);
    vertex_color = a_color;
}
 )";
inline const std::string frag = R"( #version 330 core

in vec3 Normal;
in vec3 vertex_color;

out vec4 FragColor;

uniform vec3 light_dir;
uniform float min_brightness;
uniform float alpha;

void main() {
    vec3 norm = normalize(Normal);
    float diff =
        max(dot(norm, normalize(light_dir)), min_brightness);  // never too dark
    FragColor = vec4(vertex_color * diff, alpha);
} )";
}  // namespace mesh

namespace mono_instanced {
inline const std::string vert = R"( #version 330 core

layout(location = 0) in vec3 a_model_vertex_pos;
layout(location = 1) in vec3 a_normal;

layout(location = 2) in vec4 a_transform_1;
layout(location = 3) in vec4 a_transform_2;
layout(location = 4) in vec4 a_transform_3;
layout(location = 5) in vec4 a_transform_4;

layout(location = 6) in vec3 a_color;

out vec3 o_vertex_color;
out vec3 o_normal;

uniform mat4 u_model;
uniform mat4 u_view;
uniform mat4 u_projection;

void main() {
    mat4 a_transform =
        mat4(a_transform_1, a_transform_2, a_transform_3, a_transform_4);

    o_normal = mat3(transpose(inverse(u_model))) * a_normal;

    gl_Position = u_projection * u_view * u_model * a_transform *
                  vec4(a_model_vertex_pos, 1.0);
    o_vertex_color = a_color;
}
 )";
inline const std::string frag = R"( #version 330 core

in vec3 o_normal;
in vec3 o_vertex_color;

out vec4 FragColor;

uniform vec3 u_light_dir;
uniform float u_min_brightness;

void main() {
    vec3 norm = normalize(o_normal);
    float diff =
        max(dot(norm, normalize(u_light_dir)),
            u_min_brightness);  // never too dark
    FragColor = vec4(o_vertex_color * diff, 1.0);
} )";
}  // namespace mono_instanced

namespace point_cloud {
inline const std::string vert = R"( #version 330 core

layout(location = 0) in vec3 a_model_vertex_pos;
layout(location = 1) in vec3 a_normal;
layout(location = 2) in vec3 a_position;
layout(location = 3) in float a_radius;
layout(location = 4) in vec3 a_color;

out vec3 o_vertex_color;
out vec3 o_normal;

uniform mat4 u_model;
uniform mat4 u_view;
uniform mat4 u_projection;

void main() {
    o_normal = mat3(transpose(inverse(u_model))) * a_normal;

    // scale and shift
    vec3 real_pos = (a_model_vertex_pos * a_radius) + a_position;

    gl_Position = u_projection * u_view * u_model * vec4(real_pos, 1.0);
    o_vertex_color = a_color;
}
 )";
inline const std::string frag = R"( #version 330 core

in vec3 o_normal;
in vec3 o_vertex_color;

out vec4 FragColor;

uniform vec3 u_light_dir;
uniform float u_min_brightness;

void main() {
    vec3 norm = normalize(o_normal);
    float diff =
        max(dot(norm, normalize(u_light_dir)),
            u_min_brightness);  // never too dark
    FragColor = vec4(o_vertex_color * diff, 1.0);
} )";
}  // namespace point_cloud

namespace xy_grid {
inline const std::string vert = R"( #version 330 core

layout(location = 0) in vec3 aPos;

uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;

out vec3 viewPos; // Position in view space

void main() {
    vec4 worldPos = uModel * vec4(aPos, 1.0);
    vec4 vPos = uView * worldPos;
    viewPos = vPos.xyz;

    gl_Position = uProjection * vPos;
}
 )";
inline const std::string frag = R"( #version 330 core

in vec3 viewPos;

out vec4 FragColor;

uniform vec3 uColor;
uniform float uExtraAlpha;
uniform float uScale;

void main() {
    float dist = length(viewPos);

    float alpha = clamp(
        1.0 - (dist / (uScale * 100.0)), 0.0, 1.0
    );  // adjust 20.0 to control fade range

    FragColor = vec4(uColor, alpha * uExtraAlpha);
}
 )";
}  // namespace xy_grid

}  // namespace shaders
}  // namespace slamd