// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGES_SLAMD_FLATB_H_
#define FLATBUFFERS_GENERATED_MESSAGES_SLAMD_FLATB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "geometry_generated.h"
#include "primitives_generated.h"
#include "visualizer_generated.h"

namespace slamd {
namespace flatb {

struct SetTransform;
struct SetTransformBuilder;

struct SetObject;
struct SetObjectBuilder;

struct AddGeometry;
struct AddGeometryBuilder;

struct RemoveGeometry;
struct RemoveGeometryBuilder;

struct AddTree;
struct AddTreeBuilder;

struct AddView;
struct AddViewBuilder;

struct Message;
struct MessageBuilder;

enum MessageUnion : uint8_t {
  MessageUnion_NONE = 0,
  MessageUnion_initial_state = 1,
  MessageUnion_set_transform = 2,
  MessageUnion_set_object = 3,
  MessageUnion_add_geometry = 4,
  MessageUnion_remove_geometry = 5,
  MessageUnion_add_tree = 6,
  MessageUnion_add_view = 7,
  MessageUnion_MIN = MessageUnion_NONE,
  MessageUnion_MAX = MessageUnion_add_view
};

inline const MessageUnion (&EnumValuesMessageUnion())[8] {
  static const MessageUnion values[] = {
    MessageUnion_NONE,
    MessageUnion_initial_state,
    MessageUnion_set_transform,
    MessageUnion_set_object,
    MessageUnion_add_geometry,
    MessageUnion_remove_geometry,
    MessageUnion_add_tree,
    MessageUnion_add_view
  };
  return values;
}

inline const char * const *EnumNamesMessageUnion() {
  static const char * const names[9] = {
    "NONE",
    "initial_state",
    "set_transform",
    "set_object",
    "add_geometry",
    "remove_geometry",
    "add_tree",
    "add_view",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageUnion(MessageUnion e) {
  if (::flatbuffers::IsOutRange(e, MessageUnion_NONE, MessageUnion_add_view)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageUnion()[index];
}

template<typename T> struct MessageUnionTraits {
  static const MessageUnion enum_value = MessageUnion_NONE;
};

template<> struct MessageUnionTraits<slamd::flatb::InitialState> {
  static const MessageUnion enum_value = MessageUnion_initial_state;
};

template<> struct MessageUnionTraits<slamd::flatb::SetTransform> {
  static const MessageUnion enum_value = MessageUnion_set_transform;
};

template<> struct MessageUnionTraits<slamd::flatb::SetObject> {
  static const MessageUnion enum_value = MessageUnion_set_object;
};

template<> struct MessageUnionTraits<slamd::flatb::AddGeometry> {
  static const MessageUnion enum_value = MessageUnion_add_geometry;
};

template<> struct MessageUnionTraits<slamd::flatb::RemoveGeometry> {
  static const MessageUnion enum_value = MessageUnion_remove_geometry;
};

template<> struct MessageUnionTraits<slamd::flatb::AddTree> {
  static const MessageUnion enum_value = MessageUnion_add_tree;
};

template<> struct MessageUnionTraits<slamd::flatb::AddView> {
  static const MessageUnion enum_value = MessageUnion_add_view;
};

bool VerifyMessageUnion(::flatbuffers::Verifier &verifier, const void *obj, MessageUnion type);
bool VerifyMessageUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct SetTransform FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SetTransformBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TREE_ID = 4,
    VT_TREE_PATH = 6,
    VT_TRANSFORM = 8
  };
  uint64_t tree_id() const {
    return GetField<uint64_t>(VT_TREE_ID, 0);
  }
  const ::flatbuffers::String *tree_path() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TREE_PATH);
  }
  const slamd::flatb::Mat4 *transform() const {
    return GetStruct<const slamd::flatb::Mat4 *>(VT_TRANSFORM);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TREE_ID, 8) &&
           VerifyOffset(verifier, VT_TREE_PATH) &&
           verifier.VerifyString(tree_path()) &&
           VerifyField<slamd::flatb::Mat4>(verifier, VT_TRANSFORM, 4) &&
           verifier.EndTable();
  }
};

struct SetTransformBuilder {
  typedef SetTransform Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_tree_id(uint64_t tree_id) {
    fbb_.AddElement<uint64_t>(SetTransform::VT_TREE_ID, tree_id, 0);
  }
  void add_tree_path(::flatbuffers::Offset<::flatbuffers::String> tree_path) {
    fbb_.AddOffset(SetTransform::VT_TREE_PATH, tree_path);
  }
  void add_transform(const slamd::flatb::Mat4 *transform) {
    fbb_.AddStruct(SetTransform::VT_TRANSFORM, transform);
  }
  explicit SetTransformBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SetTransform> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SetTransform>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SetTransform> CreateSetTransform(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t tree_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tree_path = 0,
    const slamd::flatb::Mat4 *transform = nullptr) {
  SetTransformBuilder builder_(_fbb);
  builder_.add_tree_id(tree_id);
  builder_.add_transform(transform);
  builder_.add_tree_path(tree_path);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SetTransform> CreateSetTransformDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t tree_id = 0,
    const char *tree_path = nullptr,
    const slamd::flatb::Mat4 *transform = nullptr) {
  auto tree_path__ = tree_path ? _fbb.CreateString(tree_path) : 0;
  return slamd::flatb::CreateSetTransform(
      _fbb,
      tree_id,
      tree_path__,
      transform);
}

struct SetObject FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SetObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TREE_ID = 4,
    VT_TREE_PATH = 6,
    VT_GEOMETRY_ID = 8
  };
  uint64_t tree_id() const {
    return GetField<uint64_t>(VT_TREE_ID, 0);
  }
  const ::flatbuffers::String *tree_path() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TREE_PATH);
  }
  uint64_t geometry_id() const {
    return GetField<uint64_t>(VT_GEOMETRY_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TREE_ID, 8) &&
           VerifyOffset(verifier, VT_TREE_PATH) &&
           verifier.VerifyString(tree_path()) &&
           VerifyField<uint64_t>(verifier, VT_GEOMETRY_ID, 8) &&
           verifier.EndTable();
  }
};

struct SetObjectBuilder {
  typedef SetObject Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_tree_id(uint64_t tree_id) {
    fbb_.AddElement<uint64_t>(SetObject::VT_TREE_ID, tree_id, 0);
  }
  void add_tree_path(::flatbuffers::Offset<::flatbuffers::String> tree_path) {
    fbb_.AddOffset(SetObject::VT_TREE_PATH, tree_path);
  }
  void add_geometry_id(uint64_t geometry_id) {
    fbb_.AddElement<uint64_t>(SetObject::VT_GEOMETRY_ID, geometry_id, 0);
  }
  explicit SetObjectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SetObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SetObject>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SetObject> CreateSetObject(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t tree_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tree_path = 0,
    uint64_t geometry_id = 0) {
  SetObjectBuilder builder_(_fbb);
  builder_.add_geometry_id(geometry_id);
  builder_.add_tree_id(tree_id);
  builder_.add_tree_path(tree_path);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SetObject> CreateSetObjectDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t tree_id = 0,
    const char *tree_path = nullptr,
    uint64_t geometry_id = 0) {
  auto tree_path__ = tree_path ? _fbb.CreateString(tree_path) : 0;
  return slamd::flatb::CreateSetObject(
      _fbb,
      tree_id,
      tree_path__,
      geometry_id);
}

struct AddGeometry FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AddGeometryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GEOMETRY = 4
  };
  const slamd::flatb::Geometry *geometry() const {
    return GetPointer<const slamd::flatb::Geometry *>(VT_GEOMETRY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GEOMETRY) &&
           verifier.VerifyTable(geometry()) &&
           verifier.EndTable();
  }
};

struct AddGeometryBuilder {
  typedef AddGeometry Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_geometry(::flatbuffers::Offset<slamd::flatb::Geometry> geometry) {
    fbb_.AddOffset(AddGeometry::VT_GEOMETRY, geometry);
  }
  explicit AddGeometryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AddGeometry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AddGeometry>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AddGeometry> CreateAddGeometry(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<slamd::flatb::Geometry> geometry = 0) {
  AddGeometryBuilder builder_(_fbb);
  builder_.add_geometry(geometry);
  return builder_.Finish();
}

struct RemoveGeometry FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RemoveGeometryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GEOMETRY_ID = 4
  };
  uint64_t geometry_id() const {
    return GetField<uint64_t>(VT_GEOMETRY_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_GEOMETRY_ID, 8) &&
           verifier.EndTable();
  }
};

struct RemoveGeometryBuilder {
  typedef RemoveGeometry Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_geometry_id(uint64_t geometry_id) {
    fbb_.AddElement<uint64_t>(RemoveGeometry::VT_GEOMETRY_ID, geometry_id, 0);
  }
  explicit RemoveGeometryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RemoveGeometry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RemoveGeometry>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RemoveGeometry> CreateRemoveGeometry(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t geometry_id = 0) {
  RemoveGeometryBuilder builder_(_fbb);
  builder_.add_geometry_id(geometry_id);
  return builder_.Finish();
}

struct AddTree FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AddTreeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TREE = 4
  };
  const slamd::flatb::Tree *tree() const {
    return GetPointer<const slamd::flatb::Tree *>(VT_TREE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TREE) &&
           verifier.VerifyTable(tree()) &&
           verifier.EndTable();
  }
};

struct AddTreeBuilder {
  typedef AddTree Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_tree(::flatbuffers::Offset<slamd::flatb::Tree> tree) {
    fbb_.AddOffset(AddTree::VT_TREE, tree);
  }
  explicit AddTreeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AddTree> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AddTree>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AddTree> CreateAddTree(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<slamd::flatb::Tree> tree = 0) {
  AddTreeBuilder builder_(_fbb);
  builder_.add_tree(tree);
  return builder_.Finish();
}

struct AddView FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AddViewBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VIEW = 4
  };
  const slamd::flatb::View *view() const {
    return GetPointer<const slamd::flatb::View *>(VT_VIEW);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VIEW) &&
           verifier.VerifyTable(view()) &&
           verifier.EndTable();
  }
};

struct AddViewBuilder {
  typedef AddView Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_view(::flatbuffers::Offset<slamd::flatb::View> view) {
    fbb_.AddOffset(AddView::VT_VIEW, view);
  }
  explicit AddViewBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AddView> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AddView>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AddView> CreateAddView(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<slamd::flatb::View> view = 0) {
  AddViewBuilder builder_(_fbb);
  builder_.add_view(view);
  return builder_.Finish();
}

struct Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_MESSAGE = 6
  };
  slamd::flatb::MessageUnion message_type() const {
    return static_cast<slamd::flatb::MessageUnion>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  template<typename T> const T *message_as() const;
  const slamd::flatb::InitialState *message_as_initial_state() const {
    return message_type() == slamd::flatb::MessageUnion_initial_state ? static_cast<const slamd::flatb::InitialState *>(message()) : nullptr;
  }
  const slamd::flatb::SetTransform *message_as_set_transform() const {
    return message_type() == slamd::flatb::MessageUnion_set_transform ? static_cast<const slamd::flatb::SetTransform *>(message()) : nullptr;
  }
  const slamd::flatb::SetObject *message_as_set_object() const {
    return message_type() == slamd::flatb::MessageUnion_set_object ? static_cast<const slamd::flatb::SetObject *>(message()) : nullptr;
  }
  const slamd::flatb::AddGeometry *message_as_add_geometry() const {
    return message_type() == slamd::flatb::MessageUnion_add_geometry ? static_cast<const slamd::flatb::AddGeometry *>(message()) : nullptr;
  }
  const slamd::flatb::RemoveGeometry *message_as_remove_geometry() const {
    return message_type() == slamd::flatb::MessageUnion_remove_geometry ? static_cast<const slamd::flatb::RemoveGeometry *>(message()) : nullptr;
  }
  const slamd::flatb::AddTree *message_as_add_tree() const {
    return message_type() == slamd::flatb::MessageUnion_add_tree ? static_cast<const slamd::flatb::AddTree *>(message()) : nullptr;
  }
  const slamd::flatb::AddView *message_as_add_view() const {
    return message_type() == slamd::flatb::MessageUnion_add_view ? static_cast<const slamd::flatb::AddView *>(message()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           VerifyMessageUnion(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
};

template<> inline const slamd::flatb::InitialState *Message::message_as<slamd::flatb::InitialState>() const {
  return message_as_initial_state();
}

template<> inline const slamd::flatb::SetTransform *Message::message_as<slamd::flatb::SetTransform>() const {
  return message_as_set_transform();
}

template<> inline const slamd::flatb::SetObject *Message::message_as<slamd::flatb::SetObject>() const {
  return message_as_set_object();
}

template<> inline const slamd::flatb::AddGeometry *Message::message_as<slamd::flatb::AddGeometry>() const {
  return message_as_add_geometry();
}

template<> inline const slamd::flatb::RemoveGeometry *Message::message_as<slamd::flatb::RemoveGeometry>() const {
  return message_as_remove_geometry();
}

template<> inline const slamd::flatb::AddTree *Message::message_as<slamd::flatb::AddTree>() const {
  return message_as_add_tree();
}

template<> inline const slamd::flatb::AddView *Message::message_as<slamd::flatb::AddView>() const {
  return message_as_add_view();
}

struct MessageBuilder {
  typedef Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message_type(slamd::flatb::MessageUnion message_type) {
    fbb_.AddElement<uint8_t>(Message::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(::flatbuffers::Offset<void> message) {
    fbb_.AddOffset(Message::VT_MESSAGE, message);
  }
  explicit MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Message> CreateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    slamd::flatb::MessageUnion message_type = slamd::flatb::MessageUnion_NONE,
    ::flatbuffers::Offset<void> message = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  return builder_.Finish();
}

inline bool VerifyMessageUnion(::flatbuffers::Verifier &verifier, const void *obj, MessageUnion type) {
  switch (type) {
    case MessageUnion_NONE: {
      return true;
    }
    case MessageUnion_initial_state: {
      auto ptr = reinterpret_cast<const slamd::flatb::InitialState *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageUnion_set_transform: {
      auto ptr = reinterpret_cast<const slamd::flatb::SetTransform *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageUnion_set_object: {
      auto ptr = reinterpret_cast<const slamd::flatb::SetObject *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageUnion_add_geometry: {
      auto ptr = reinterpret_cast<const slamd::flatb::AddGeometry *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageUnion_remove_geometry: {
      auto ptr = reinterpret_cast<const slamd::flatb::RemoveGeometry *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageUnion_add_tree: {
      auto ptr = reinterpret_cast<const slamd::flatb::AddTree *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageUnion_add_view: {
      auto ptr = reinterpret_cast<const slamd::flatb::AddView *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMessageUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessageUnion(
        verifier,  values->Get(i), types->GetEnum<MessageUnion>(i))) {
      return false;
    }
  }
  return true;
}

inline const slamd::flatb::Message *GetMessage(const void *buf) {
  return ::flatbuffers::GetRoot<slamd::flatb::Message>(buf);
}

inline const slamd::flatb::Message *GetSizePrefixedMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<slamd::flatb::Message>(buf);
}

inline bool VerifyMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<slamd::flatb::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<slamd::flatb::Message>(nullptr);
}

inline void FinishMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<slamd::flatb::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<slamd::flatb::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flatb
}  // namespace slamd

#endif  // FLATBUFFERS_GENERATED_MESSAGES_SLAMD_FLATB_H_
